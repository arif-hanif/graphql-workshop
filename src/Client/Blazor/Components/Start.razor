@inject IChatClient ChatClient
@inject ISessionStorageService SessionStore

@if (_me == null)
{
  if (_showSignUpForm)
  {
    <SignUpForm
      ClickSignIn="OnClickSignIn"
      HandleSignUp="@(async (model) => { await OnHandleSignUp(model); })"
    />
  }
  else
  {
    <SignInForm
      ClickSignUp="OnClickSignUp"
      HandleSignIn="@(async (model) => { await OnHandleSignIn(model); })"
    />
  }
}
else
{
  <Main
    User="@_me"
    ClickSignOut="OnClickSignOut"
  />
}

@code {
    private IPerson? _me;
    private bool _showSignUpForm;

    protected override async Task OnInitializedAsync()
    {
        _me = (await SessionStore.GetItemAsync<PersonFromStore>("Me"))?
            .ToPerson();
    }

    private void OnClickSignIn()
    {
        _showSignUpForm = false;
    }

    private async Task OnClickSignOut()
    {
        await SessionStore.RemoveItemAsync("Me");
        await SessionStore.RemoveItemAsync("Token");
        _me = null;
        _showSignUpForm = false;
    }

    private void OnClickSignUp()
    {
        _showSignUpForm = true;
    }

    private async Task OnHandleSignIn(SignInModel model)
    {
        var signIn = await ChatClient.SignInAsync(new LoginInput
        {
            Email = model.Email,
            Password = model.Password
        });

        if (signIn.HasErrors)
        {
            // todo: error handling
        }
        else
        {
            _me = signIn.Data.Login.Me;
            await SessionStore.SetItemAsync("Me", _me);
            await SessionStore.SetItemAsync("Token", signIn.Data.Login.Token);
        }
    }

    private async Task OnHandleSignUp(SignUpModel model)
    {
        var signUp = await ChatClient.SignUpAsync(new CreateUserInput
        {
            Email = model.Email,
            Name = model.Name,
            Password = model.Password
        });

        if (signUp.HasErrors)
        {
            // todo: error handling
        }
        else
        {
            _showSignUpForm = false;
        }
    }
}