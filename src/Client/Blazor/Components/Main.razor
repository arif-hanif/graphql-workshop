@using System.Collections.Immutable;
@inject IChatClient ChatClient
@inject ISessionStorageService SessionStore

<PeopleList
  IsLoading="@_isLoadingPeople"
  People="@_people"
  ClickPerson="OnClickPerson"
/>
<MessageList
  IsLoading="@_isLoadingRecipient"
  IsTyping="@_isChatParticipantTyping"
  Recipient="@_recipient"
  Messages="@_messages"
  ClickSend="OnSendMessage"
/>

@code {
    private bool _isLoadingPeople = true;
    private bool _isLoadingRecipient = false;
    private bool _isChatParticipantTyping = false;
    private IPersonConnection? _people;
    private IRecipient? _recipient;
    private ImmutableList<IMessage> _messages = ImmutableList<IMessage>.Empty;
    private IResponseStream<IMessage>? _messageStream;

    [Parameter]
    public EventCallback ClickSignOut { get; set; }

    [Parameter]
    public IPerson User { get; set; } = default(IPerson);

    protected override async Task OnInitializedAsync()
    {
        var recipientId = await SessionStore.GetItemAsync<string>("RecipientId");

        if (string.IsNullOrWhiteSpace(recipientId))
        {
            await LoadPeople(User.Id);
        }
        else
        {
            await LoadPeopleAndRecipient(User.Id, recipientId);
        }

        /*
        IResponseStream<IOnMessageReceived> messageStream = 
            await ChatClient.OnMessageReceivedAsync();
        
        Task.Run(async () => 
        {
            await foreach(IOperationResult<IOnMessageReceived> response in messageStream) 
            {
                if(!response.HasErrors 
                    && _recipient is { } 
                    && _recipient.Id == response.Data.Message.Sender.Id) 
                {
                    
                    
                }
            }
        });
        */

        
        _isLoadingPeople = false;
        StateHasChanged();
    }

    private async Task OnClickPerson(IPerson person)
    {
        var operation = await ChatClient.GetRecipientAsync(person.Id);

        if (operation.IsNotAuthenticted() && ClickSignOut.HasDelegate)
        {
            await ClickSignOut.InvokeAsync(null);
        }

        _recipient = operation.Data?.PersonById;

        if (_recipient == null)
        {
            await SessionStore.RemoveItemAsync("RecipientId");
        }
        else
        {
            await SessionStore.SetItemAsync("RecipientId", _recipient.Id);
        }
    }

    private async Task OnSendMessage(string message)
    {
        if(_recipient is { }) 
        {
            var operation = await ChatClient
                .SendMessageAsync(_recipient.Email, message);
        }
    }

    private async Task LoadPeople(string userId)
    {
        var operation = await ChatClient.GetPeopleAsync(userId);

        if (operation.IsNotAuthenticted() && ClickSignOut.HasDelegate)
        {
            await ClickSignOut.InvokeAsync(null);
        }
        
        _people = operation.Data?.People;
    }

    private async Task LoadPeopleAndRecipient(string userId, string recipientId)
    {
        var operation = await ChatClient.GetPeopleAndRecipientAsync(userId, recipientId);

        if (operation.IsNotAuthenticted() && ClickSignOut.HasDelegate)
        {
            await ClickSignOut.InvokeAsync(null);
        }

        if (operation.IsNonNullViolation())
        {
            await SessionStore.RemoveItemAsync("RecipientId");
            await LoadPeople(string.Empty);
        }
        
        _people = operation.Data?.People;
        _recipient = operation.Data?.PersonById;
    }
}