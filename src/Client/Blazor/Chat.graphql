schema {
  query: Query
  mutation: Mutation
}

"The multiplier path scalar represents a valid GraphQL multiplier path string."
scalar MultiplierPath

type Query {
  me: Person!
  people(after: String before: String first: PaginationAmount last: PaginationAmount order_by: PersonSort where: PersonFilter): PersonConnection
}

type Mutation {
  createUser(input: CreateUserInput!): CreateUserPayload!
  inviteFriend(input: InviteFriendInput!): InviteFriendPayload!
}

type Person {
  email: String!
  friendIds: [Uuid]!
  id: Uuid!
  lastSeen: DateTime!
  name: String!
  userId: Uuid!
}

input PersonFilter {
  AND: [PersonFilter!]
  email: String
  email_contains: String
  email_ends_with: String
  email_in: [String!]
  email_not: String
  email_not_contains: String
  email_not_ends_with: String
  email_not_in: [String!]
  email_not_starts_with: String
  email_starts_with: String
  id: Uuid
  id_gt: Uuid
  id_gte: Uuid
  id_in: [Uuid!]
  id_lt: Uuid
  id_lte: Uuid
  id_not: Uuid
  id_not_gt: Uuid
  id_not_gte: Uuid
  id_not_in: [Uuid!]
  id_not_lt: Uuid
  id_not_lte: Uuid
  lastSeen: DateTime
  lastSeen_gt: DateTime
  lastSeen_gte: DateTime
  lastSeen_in: [DateTime!]
  lastSeen_lt: DateTime
  lastSeen_lte: DateTime
  lastSeen_not: DateTime
  lastSeen_not_gt: DateTime
  lastSeen_not_gte: DateTime
  lastSeen_not_in: [DateTime!]
  lastSeen_not_lt: DateTime
  lastSeen_not_lte: DateTime
  name: String
  name_contains: String
  name_ends_with: String
  name_in: [String!]
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  OR: [PersonFilter!]
  userId: Uuid
  userId_gt: Uuid
  userId_gte: Uuid
  userId_in: [Uuid!]
  userId_lt: Uuid
  userId_lte: Uuid
  userId_not: Uuid
  userId_not_gt: Uuid
  userId_not_gte: Uuid
  userId_not_in: [Uuid!]
  userId_not_lt: Uuid
  userId_not_lte: Uuid
}

input PersonSort {
  email: SortOperationKind
  id: SortOperationKind
  lastSeen: SortOperationKind
  name: SortOperationKind
  userId: SortOperationKind
}

scalar PaginationAmount

"A connection to a list of items."
type PersonConnection {
  "A list of edges."
  edges: [PersonEdge!]
  "A flattened list of the nodes."
  nodes: [Person]
  "Information to aid in pagination."
  pageInfo: PageInfo!
  totalCount: Int!
}

enum SortOperationKind {
  ASC
  DESC
}

"Information about pagination in a connection."
type PageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "Indicates whether more edges exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more edges exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

"An edge in a connection."
type PersonEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Person
}

type CreateUserPayload {
  clientMutationId: String
  user: User!
}

input CreateUserInput {
  clientMutationId: String
  email: String!
  image: [Byte!]
  name: String!
  password: String!
}

input InviteFriendInput {
  clientMutationId: String
  email: String!
}

type InviteFriendPayload {
  clientMutationId: String
  me: Person!
}

scalar Uuid

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime

type User {
  email: String!
  id: Uuid!
  passwordHash: String!
  personId: Uuid!
  salt: String!
}

"The `Byte` scalar type represents non-fractional whole numeric values. Byte can represent values between 0 and 255."
scalar Byte

"The cost directives is used to express the complexity of a field."
directive @cost("Defines the complexity of the field." complexity: Int! = 1 "Defines field arguments that act as complexity multipliers." multipliers: [MultiplierPath!]) on FIELD_DEFINITION